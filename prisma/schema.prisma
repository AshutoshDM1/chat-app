generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // to send or receive requests
  friendRequestsSent     FriendRequest[] @relation("RequestsSent")
  friendRequestsReceived FriendRequest[] @relation("RequestsReceived")
  friendships1           Friendship[]    @relation("User1")
  friendships2           Friendship[]    @relation("User2")

  // one on one or group chat 
  conversations Conversation[] @relation("UserConversations")
  messages      Message[]      @relation("UserMessages")
  seenMessages  Message[]      @relation("MessageSeen")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model FriendRequest {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  status     RequestStatus @default(PENDING)

  sender   User @relation("RequestsSent", fields: [senderId], references: [id])
  receiver User @relation("RequestsReceived", fields: [receiverId], references: [id])

  createdAt DateTime @default(now())
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Friendship {
  id      String @id @default(uuid())
  userId1 String
  userId2 String

  user1 User @relation("User1", fields: [userId1], references: [id], onDelete: Cascade)
  user2 User @relation("User2", fields: [userId2], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Conversation {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  lastMessageAt DateTime  @default(now())
  name          String?
  isGroup       Boolean?  @default(false)
  messages      Message[]
  users         User[]    @relation("UserConversations")
}

model Message {
  id             String       @id @default(uuid())
  body           String?
  image          String?
  createdAt      DateTime     @default(now())
  seenBy         User[]       @relation("MessageSeen")
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  sender         User         @relation("UserMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId       String
}
